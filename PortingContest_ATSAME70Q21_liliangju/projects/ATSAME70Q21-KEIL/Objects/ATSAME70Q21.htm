<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ATSAME70Q21.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ATSAME70Q21.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Jul 04 23:48:43 2017
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; LOS_KernelInit &rArr; osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[de]">LOS_StartToRun</a>
 <LI><a href="#[ff]">LOS_IntNumGet</a>
 <LI><a href="#[115]">osDisableIRQ</a>
 <LI><a href="#[b2]">LOS_IntLock</a>
 <LI><a href="#[120]">LOS_IntUnLock</a>
 <LI><a href="#[b3]">LOS_IntRestore</a>
 <LI><a href="#[d9]">osTaskSchedule</a>
 <LI><a href="#[2]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DebugMon_Handler</a><BR>
 <LI><a href="#[35]">ACC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">ACC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">ACC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[47]">AES_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[31]">AFEC0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[3a]">AFEC1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[32]">DACC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[1b]">EFC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[d]">Example_Dyn_Mem</a> from los_api_dynamic_mem.o(i.Example_Dyn_Mem) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[57]">Example_Event</a> from los_api_event.o(i.Example_Event) referenced from los_api_event.o(i.Example_SndRcvEvent)
 <LI><a href="#[9]">Example_GetTick</a> from los_api_systick.o(i.Example_GetTick) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[6]">Example_MsgQueue</a> from los_api_msgqueue.o(i.Example_MsgQueue) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[8]">Example_MutexLock</a> from los_api_mutex.o(i.Example_MutexLock) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[53]">Example_MutexTask1</a> from los_api_mutex.o(i.Example_MutexTask1) referenced from los_api_mutex.o(i.Example_MutexLock)
 <LI><a href="#[54]">Example_MutexTask2</a> from los_api_mutex.o(i.Example_MutexTask2) referenced from los_api_mutex.o(i.Example_MutexLock)
 <LI><a href="#[55]">Example_SemTask1</a> from los_api_sem.o(i.Example_SemTask1) referenced from los_api_sem.o(i.Example_Semphore)
 <LI><a href="#[56]">Example_SemTask2</a> from los_api_sem.o(i.Example_SemTask2) referenced from los_api_sem.o(i.Example_Semphore)
 <LI><a href="#[7]">Example_Semphore</a> from los_api_sem.o(i.Example_Semphore) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[5]">Example_SndRcvEvent</a> from los_api_event.o(i.Example_SndRcvEvent) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[c]">Example_StaticMem</a> from los_api_static_mem.o(i.Example_StaticMem) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[58]">Example_TaskHi</a> from los_api_task.o(i.Example_TaskHi) referenced from los_api_task.o(i.Example_TskCaseEntry)
 <LI><a href="#[59]">Example_TaskLo</a> from los_api_task.o(i.Example_TaskLo) referenced from los_api_task.o(i.Example_TskCaseEntry)
 <LI><a href="#[4]">Example_TskCaseEntry</a> from los_api_task.o(i.Example_TskCaseEntry) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[b]">Example_list</a> from los_api_list.o(i.Example_list) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[a]">Example_swTimer</a> from los_api_timer.o(i.Example_swTimer) referenced 2 times from los_inspect_entry.o(.data)
 <LI><a href="#[39]">GMAC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[26]">HSMCI_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[34]">ICM_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[4a]">ISI_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[5c]">LOS_Demo_Tskfunc</a> from los_demo_entry.o(i.LOS_Demo_Tskfunc) referenced from los_demo_entry.o(i.LOS_Demo_Entry)
 <LI><a href="#[5d]">LOS_Inspect_TskDeal</a> from los_inspect_entry.o(i.LOS_Inspect_TskDeal) referenced from los_inspect_entry.o(i.LOS_Inspect_Entry)
 <LI><a href="#[37]">MCAN0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[38]">MCAN1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[1e]">PIOA_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[1f]">PIOB_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[20]">PIOC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[24]">PIOD_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[25]">PIOE_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[1a]">PMC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[33]">PWM0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[4b]">PWM1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[2]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[2]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[3d]">QSPI_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[16]">RSTC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[4d]">RSWDT_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[17]">RTC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[18]">RTT_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_same70.o(.text) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[0]">Reset_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[4c]">SDRAMC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[29]">SPI0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[3c]">SPI1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[2a]">SSC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[15]">SUPC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[3]">SysTick_Handler</a> from los_bsp_adapter.o(i.SysTick_Handler) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[3]">SysTick_Handler</a> from los_bsp_adapter.o(i.SysTick_Handler) referenced from startup_same70.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_same70.o(i.SystemInit) referenced from startup_same70.o(.text)
 <LI><a href="#[2b]">TC0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[45]">TC10_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[46]">TC11_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[2c]">TC1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[2d]">TC2_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[2e]">TC3_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[2f]">TC4_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[30]">TC5_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[41]">TC6_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[42]">TC7_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[43]">TC8_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[44]">TC9_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[48]">TRNG_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[27]">TWIHS0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[28]">TWIHS1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[3b]">TWIHS2_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[5a]">Timer1_Callback</a> from los_api_timer.o(i.Timer1_Callback) referenced from los_api_timer.o(i.Example_swTimer)
 <LI><a href="#[5b]">Timer2_Callback</a> from los_api_timer.o(i.Timer2_Callback) referenced from los_api_timer.o(i.Example_swTimer)
 <LI><a href="#[1c]">UART0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[1d]">UART1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[3e]">UART2_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[3f]">UART3_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[40]">UART4_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[21]">USART0_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[22]">USART1_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[23]">USART2_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[36]">USBHS_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[19]">WDT_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[49]">XDMAC_Handler</a> from startup_same70.o(.text) referenced from startup_same70.o(RESET)
 <LI><a href="#[50]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_same70.o(.text)
 <LI><a href="#[5e]">fputc</a> from los_bsp_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced 14 times from los_hwi.o(.vector.bss)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.osHwiInit)
 <LI><a href="#[5f]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.osIdleTaskCreate)
 <LI><a href="#[60]">osSwTmrTask</a> from los_swtmr.o(i.osSwTmrTask) referenced from los_swtmr.o(i.osSwTmrTaskCreate)
 <LI><a href="#[62]">osTaskEntry</a> from los_task.o(i.osTaskEntry) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[61]">osTaskExit</a> from los_hw.o(i.osTaskExit) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[52]">recv_Entry</a> from los_api_msgqueue.o(i.recv_Entry) referenced from los_api_msgqueue.o(i.Example_MsgQueue)
 <LI><a href="#[51]">send_Entry</a> from los_api_msgqueue.o(i.send_Entry) referenced from los_api_msgqueue.o(i.Example_MsgQueue)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[de]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[ff]"></a>LOS_IntNumGet</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>

<P><STRONG><a name="[115]"></a>osDisableIRQ</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskExit
</UL>

<P><STRONG><a name="[b2]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventClear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>

<P><STRONG><a name="[120]"></a>LOS_IntUnLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventClear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>

<P><STRONG><a name="[d9]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[2]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(.vector.bss)
<LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(.vector.bss)
<LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ACC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>AES_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>AFEC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>AFEC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DACC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EFC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GMAC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>HSMCI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ICM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ISI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>MCAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>MCAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PIOA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PIOB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PIOC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PIOD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PIOE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PMC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PWM0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PWM1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>QSPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RSTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RSWDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDRAMC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SSC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SUPC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TC10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TC11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TC2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TC3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TC4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TC5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TC6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TC7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TC8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TC9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TRNG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TWIHS0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TWIHS1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TWIHS2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBHS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>XDMAC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_same70.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxClr
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueCreate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_Entry
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Demo_Entry
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SndRcvEvent
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[127]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[128]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>Buttons_GetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buttons_same70-xpld.o(i.Buttons_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbGetKeyVal
</UL>

<P><STRONG><a name="[ac]"></a>Buttons_Initialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, buttons_same70-xpld.o(i.Buttons_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbKeyInit
</UL>

<P><STRONG><a name="[75]"></a>DBG_Configure</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, dbg_console.o(i.DBG_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbUartInit
</UL>

<P><STRONG><a name="[79]"></a>DBG_PutChar</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dbg_console.o(i.DBG_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbUartWriteByte
</UL>

<P><STRONG><a name="[d]"></a>Example_Dyn_Mem</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, los_api_dynamic_mem.o(i.Example_Dyn_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Example_Dyn_Mem &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>Example_Event</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, los_api_event.o(i.Example_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Example_Event &rArr; LOS_EventRead &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_event.o(i.Example_SndRcvEvent)
</UL>
<P><STRONG><a name="[9]"></a>Example_GetTick</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, los_api_systick.o(i.Example_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Example_GetTick &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_CyclePerTickGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Example_MsgQueue</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, los_api_msgqueue.o(i.Example_MsgQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Example_MsgQueue &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Example_MutexLock</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, los_api_mutex.o(i.Example_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Example_MutexLock &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>Example_MutexTask1</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, los_api_mutex.o(i.Example_MutexTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Example_MutexTask1 &rArr; LOS_MuxPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_mutex.o(i.Example_MutexLock)
</UL>
<P><STRONG><a name="[54]"></a>Example_MutexTask2</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, los_api_mutex.o(i.Example_MutexTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Example_MutexTask2 &rArr; LOS_MuxPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_mutex.o(i.Example_MutexLock)
</UL>
<P><STRONG><a name="[55]"></a>Example_SemTask1</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, los_api_sem.o(i.Example_SemTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Example_SemTask1 &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_sem.o(i.Example_Semphore)
</UL>
<P><STRONG><a name="[56]"></a>Example_SemTask2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, los_api_sem.o(i.Example_SemTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Example_SemTask2 &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_sem.o(i.Example_Semphore)
</UL>
<P><STRONG><a name="[7]"></a>Example_Semphore</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, los_api_sem.o(i.Example_Semphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Example_Semphore &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Example_SndRcvEvent</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, los_api_event.o(i.Example_SndRcvEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Example_SndRcvEvent &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventClear
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Example_StaticMem</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, los_api_static_mem.o(i.Example_StaticMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Example_StaticMem &rArr; LOS_InspectStatusSetByID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxClr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>Example_TaskHi</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, los_api_task.o(i.Example_TaskHi))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = Example_TaskHi &rArr; LOS_TaskDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_task.o(i.Example_TskCaseEntry)
</UL>
<P><STRONG><a name="[59]"></a>Example_TaskLo</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, los_api_task.o(i.Example_TaskLo))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = Example_TaskLo &rArr; LOS_TaskDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_task.o(i.Example_TskCaseEntry)
</UL>
<P><STRONG><a name="[4]"></a>Example_TskCaseEntry</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, los_api_task.o(i.Example_TskCaseEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Example_TskCaseEntry &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Example_list</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, los_api_list.o(i.Example_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Example_list &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Example_swTimer</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, los_api_timer.o(i.Example_swTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Example_swTimer &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>LED_Initialize</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, led_same70-xpld.o(i.LED_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_Initialize &rArr; LED_SetOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbLedInit
</UL>

<P><STRONG><a name="[a3]"></a>LED_Off</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_same70-xpld.o(i.LED_Off))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbLedControl
</UL>

<P><STRONG><a name="[a2]"></a>LED_On</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_same70-xpld.o(i.LED_On))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbLedControl
</UL>

<P><STRONG><a name="[a1]"></a>LED_SetOut</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led_same70-xpld.o(i.LED_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_SetOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
</UL>

<P><STRONG><a name="[e4]"></a>LOS_Align</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_misc.o(i.LOS_Align))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[80]"></a>LOS_CyclePerTickGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sys.o(i.LOS_CyclePerTickGet))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_GetTick
</UL>

<P><STRONG><a name="[c9]"></a>LOS_DLnkInitMultiHead</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, los_multipledlinkhead.o(i.LOS_DLnkInitMultiHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LOS_DLnkInitMultiHead
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[a4]"></a>LOS_DLnkMultiHead</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, los_multipledlinkhead.o(i.LOS_DLnkMultiHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Log2
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFindSuitableFreeBlock
</UL>

<P><STRONG><a name="[a6]"></a>LOS_Demo_Entry</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, los_demo_entry.o(i.LOS_Demo_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = LOS_Demo_Entry &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>LOS_Demo_Tskfunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, los_demo_entry.o(i.LOS_Demo_Tskfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_Demo_Tskfunc &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_demo_entry.o(i.LOS_Demo_Entry)
</UL>
<P><STRONG><a name="[a7]"></a>LOS_EnableTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, los_config.o(i.LOS_EnableTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LOS_EnableTick &rArr; osTickStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>LOS_EvbGetKeyVal</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_bsp_key.o(i.LOS_EvbGetKeyVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_EvbGetKeyVal
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_KeyAndLed
</UL>

<P><STRONG><a name="[ab]"></a>LOS_EvbKeyInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_bsp_key.o(i.LOS_EvbKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LOS_EvbKeyInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbSetup
</UL>

<P><STRONG><a name="[ad]"></a>LOS_EvbLedControl</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, los_bsp_led.o(i.LOS_EvbLedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_EvbLedControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_TskDeal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_KeyAndLed
</UL>

<P><STRONG><a name="[ae]"></a>LOS_EvbLedInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_bsp_led.o(i.LOS_EvbLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LOS_EvbLedInit &rArr; LED_Initialize &rArr; LED_SetOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbSetup
</UL>

<P><STRONG><a name="[af]"></a>LOS_EvbSetup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, los_bsp_adapter.o(i.LOS_EvbSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LOS_EvbSetup &rArr; LOS_EvbUartInit &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbUartInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbLedInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbKeyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>LOS_EvbUartInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, los_bsp_uart.o(i.LOS_EvbUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LOS_EvbUartInit &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbSetup
</UL>

<P><STRONG><a name="[b1]"></a>LOS_EvbUartWriteByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_bsp_uart.o(i.LOS_EvbUartWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LOS_EvbUartWriteByte &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[93]"></a>LOS_EventClear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, los_event.o(i.LOS_EventClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_EventClear
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SndRcvEvent
</UL>

<P><STRONG><a name="[91]"></a>LOS_EventInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, los_event.o(i.LOS_EventInit))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SndRcvEvent
</UL>

<P><STRONG><a name="[b4]"></a>LOS_EventPoll</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, los_event.o(i.LOS_EventPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_EventPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
</UL>

<P><STRONG><a name="[7f]"></a>LOS_EventRead</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, los_event.o(i.LOS_EventRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_EventRead &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Event
</UL>

<P><STRONG><a name="[92]"></a>LOS_EventWrite</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, los_event.o(i.LOS_EventWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LOS_EventWrite &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SndRcvEvent
</UL>

<P><STRONG><a name="[ba]"></a>LOS_InspectByID</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, los_inspect_entry.o(i.LOS_InspectByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_InspectByID &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_TskDeal
</UL>

<P><STRONG><a name="[7e]"></a>LOS_InspectStatusSetByID</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_inspect_entry.o(i.LOS_InspectStatusSetByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LOS_InspectStatusSetByID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskLo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskHi
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_GetTick
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_StaticMem
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_Entry
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_list
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Event
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Dyn_Mem
</UL>

<P><STRONG><a name="[bb]"></a>LOS_Inspect_Entry</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, los_inspect_entry.o(i.LOS_Inspect_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = LOS_Inspect_Entry &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>LOS_Inspect_TskDeal</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, los_inspect_entry.o(i.LOS_Inspect_TskDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_Inspect_TskDeal &rArr; LOS_InspectByID &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbLedControl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectByID
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_KeyAndLed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_inspect_entry.o(i.LOS_Inspect_Entry)
</UL>
<P><STRONG><a name="[bd]"></a>LOS_KernelInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, los_config.o(i.LOS_KernelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LOS_KernelInit &rArr; osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>LOS_MemAlloc</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, los_memory.o(i.LOS_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueCreate
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_list
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Dyn_Mem
</UL>

<P><STRONG><a name="[c6]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, los_memory.o(i.LOS_MemAllocAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[7d]"></a>LOS_MemFree</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, los_memory.o(i.LOS_MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemCheckUsedNode
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Dyn_Mem
</UL>

<P><STRONG><a name="[7a]"></a>LOS_MemInit</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, los_memory.o(i.LOS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LOS_MemInit &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkInitMultiHead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSetMagicNumAndTaskid
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Dyn_Mem
</UL>

<P><STRONG><a name="[95]"></a>LOS_MemboxAlloc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, los_membox.o(i.LOS_MemboxAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_MemboxAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_StaticMem
</UL>

<P><STRONG><a name="[96]"></a>LOS_MemboxClr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, los_membox.o(i.LOS_MemboxClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_MemboxClr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_StaticMem
</UL>

<P><STRONG><a name="[97]"></a>LOS_MemboxFree</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, los_membox.o(i.LOS_MemboxFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_MemboxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_StaticMem
</UL>

<P><STRONG><a name="[94]"></a>LOS_MemboxInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, los_membox.o(i.LOS_MemboxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_MemboxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_StaticMem
</UL>

<P><STRONG><a name="[87]"></a>LOS_MuxCreate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, los_mux.o(i.LOS_MuxCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_MuxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
</UL>

<P><STRONG><a name="[89]"></a>LOS_MuxDelete</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, los_mux.o(i.LOS_MuxDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_MuxDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
</UL>

<P><STRONG><a name="[8b]"></a>LOS_MuxPend</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask1
</UL>

<P><STRONG><a name="[8c]"></a>LOS_MuxPost</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, los_mux.o(i.LOS_MuxPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask1
</UL>

<P><STRONG><a name="[b5]"></a>LOS_PriqueueDequeue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_PriqueueDequeue))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[b9]"></a>LOS_PriqueueEnqueue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_priqueue.o(i.LOS_PriqueueEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[e9]"></a>LOS_PriqueueSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_PriqueueSize))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[d8]"></a>LOS_PriqueueTop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_PriqueueTop))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[85]"></a>LOS_QueueCreate</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, los_queue.o(i.LOS_QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MsgQueue
</UL>

<P><STRONG><a name="[d2]"></a>LOS_QueueDelete</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, los_queue.o(i.LOS_QueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LOS_QueueDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_Entry
</UL>

<P><STRONG><a name="[d4]"></a>LOS_QueueRead</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, los_queue.o(i.LOS_QueueRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_Entry
</UL>

<P><STRONG><a name="[d7]"></a>LOS_QueueWrite</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, los_queue.o(i.LOS_QueueWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Entry
</UL>

<P><STRONG><a name="[b7]"></a>LOS_Schedule</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, los_hw.o(i.LOS_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[8f]"></a>LOS_SemCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, los_sem.o(i.LOS_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_SemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
</UL>

<P><STRONG><a name="[90]"></a>LOS_SemDelete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, los_sem.o(i.LOS_SemDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_SemDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
</UL>

<P><STRONG><a name="[8d]"></a>LOS_SemPend</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, los_sem.o(i.LOS_SemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask2
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask1
</UL>

<P><STRONG><a name="[8e]"></a>LOS_SemPost</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, los_sem.o(i.LOS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask2
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask1
</UL>

<P><STRONG><a name="[119]"></a>LOS_SetTickSycle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_hw_tick.o(i.LOS_SetTickSycle))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
</UL>

<P><STRONG><a name="[dd]"></a>LOS_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_config.o(i.LOS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>LOS_SwtmrCreate</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, los_swtmr.o(i.LOS_SwtmrCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_swTimer
</UL>

<P><STRONG><a name="[9f]"></a>LOS_SwtmrDelete</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, los_swtmr.o(i.LOS_SwtmrDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrDelete &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_swTimer
</UL>

<P><STRONG><a name="[9d]"></a>LOS_SwtmrStart</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, los_swtmr.o(i.LOS_SwtmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrStart &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_swTimer
</UL>

<P><STRONG><a name="[9e]"></a>LOS_SwtmrStop</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, los_swtmr.o(i.LOS_SwtmrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_swTimer
</UL>

<P><STRONG><a name="[84]"></a>LOS_TaskCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_Entry
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Demo_Entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TskCaseEntry
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MsgQueue
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SndRcvEvent
</UL>

<P><STRONG><a name="[e2]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, los_task.o(i.LOS_TaskCreateOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[82]"></a>LOS_TaskDelay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectByID
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_KeyAndLed
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Demo_Tskfunc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_swTimer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskLo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskHi
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_GetTick
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask2
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask2
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_Entry
</UL>

<P><STRONG><a name="[8a]"></a>LOS_TaskDelete</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TskCaseEntry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskLo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskHi
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SndRcvEvent
</UL>

<P><STRONG><a name="[83]"></a>LOS_TaskLock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, los_task.o(i.LOS_TaskLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_TaskLock
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TskCaseEntry
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MsgQueue
</UL>

<P><STRONG><a name="[99]"></a>LOS_TaskResume</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_TaskResume &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskLo
</UL>

<P><STRONG><a name="[98]"></a>LOS_TaskSuspend</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_TaskSuspend &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskHi
</UL>

<P><STRONG><a name="[86]"></a>LOS_TaskUnlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, los_task.o(i.LOS_TaskUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_TaskUnlock &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TskCaseEntry
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MsgQueue
</UL>

<P><STRONG><a name="[e8]"></a>LOS_TaskYield</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_TaskYield &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueSize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[81]"></a>LOS_TickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sys.o(i.LOS_TickCountGet))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Callback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Callback
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_GetTick
</UL>

<P><STRONG><a name="[ea]"></a>LOS_TickHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, los_hw_tick.o(i.LOS_TickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LOS_TickHandler &rArr; osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fd]"></a>LosAdapIntInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, los_bsp_adapter.o(i.LosAdapIntInit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiInit
</UL>

<P><STRONG><a name="[77]"></a>PIO_Configure</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pio.o(i.PIO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralD
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralB
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralA
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetOutput
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetInput
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>

<P><STRONG><a name="[78]"></a>PMC_EnablePeripheral</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, pmc.o(i.PMC_EnablePeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[3]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_bsp_adapter.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; LOS_TickHandler &rArr; osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(.vector.bss)
<LI> startup_same70.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, system_same70.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, system_same70.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_same70.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>Timer1_Callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, los_api_timer.o(i.Timer1_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer1_Callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_timer.o(i.Example_swTimer)
</UL>
<P><STRONG><a name="[5b]"></a>Timer2_Callback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, los_api_timer.o(i.Timer2_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timer2_Callback &rArr; LOS_InspectStatusSetByID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_timer.o(i.Example_swTimer)
</UL>
<P><STRONG><a name="[f2]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_TskDeal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectByID
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_KeyAndLed
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Demo_Entry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Callback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Callback
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_swTimer
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TskCaseEntry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskLo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_TaskHi
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_GetTick
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_StaticMem
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Semphore
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask2
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SemTask1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexTask1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MutexLock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_Entry
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_MsgQueue
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_list
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_SndRcvEvent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Event
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_Dyn_Mem
</UL>

<P><STRONG><a name="[12f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[130]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5e]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_bsp_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = fputc &rArr; LOS_EvbUartWriteByte &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbUartWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[9b]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_list
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = main &rArr; LOS_KernelInit &rArr; osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbSetup
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_Entry
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Demo_Entry
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EnableTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>osHwiDefaultHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hwi.o(i.osHwiDefaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osHwiDefaultHandler &rArr; osIntNumGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(i.osHwiInit)
<LI> los_hwi.o(.vector.bss)
</UL>
<P><STRONG><a name="[fc]"></a>osHwiInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, los_hwi.o(i.osHwiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osHwiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LosAdapIntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[5f]"></a>osIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_task.o(i.osIdleTask))
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(i.osIdleTaskCreate)
</UL>
<P><STRONG><a name="[fe]"></a>osIdleTaskCreate</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_task.o(i.osIdleTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osIdleTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[fb]"></a>osIntNumGet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_hwi.o(i.osIntNumGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osIntNumGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
</UL>

<P><STRONG><a name="[be]"></a>osMain</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, los_config.o(i.osMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[101]"></a>osMemSystemInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, los_memory.o(i.osMemSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osMemSystemInit &rArr; LOS_MemInit &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[104]"></a>osMuxInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, los_mux.o(i.osMuxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osMuxInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[10f]"></a>osPriqueueInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osPriqueueInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[d0]"></a>osQueueCreate</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, los_queue.o(i.osQueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>

<P><STRONG><a name="[105]"></a>osQueueInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, los_queue.o(i.osQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = osQueueInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[100]"></a>osRegister</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_config.o(i.osRegister))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[e3]"></a>osSchedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_hw.o(i.osSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSchedule
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[103]"></a>osSemInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_sem.o(i.osSemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSemInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[106]"></a>osSwTmrInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[e1]"></a>osSwTmrStart</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwTmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[60]"></a>osSwTmrTask</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osSwTmrTask &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_swtmr.o(i.osSwTmrTaskCreate)
</UL>
<P><STRONG><a name="[111]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, los_swtmr.o(i.osSwTmrTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[113]"></a>osSwtmrScan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[df]"></a>osSwtmrStop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
</UL>

<P><STRONG><a name="[b6]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, los_task.o(i.osTaskAdd2TimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[62]"></a>osTaskEntry</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, los_task.o(i.osTaskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osTaskEntry &rArr; LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[61]"></a>osTaskExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hw.o(i.osTaskExit))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[102]"></a>osTaskInit</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, los_task.o(i.osTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osTaskInit &rArr; osPriqueueInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[10d]"></a>osTaskMemUsedDec</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, los_memstat.o(i.osTaskMemUsedDec))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
</UL>

<P><STRONG><a name="[10b]"></a>osTaskMemUsedInc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, los_memstat.o(i.osTaskMemUsedInc))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[cf]"></a>osTaskPriModify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, los_task.o(i.osTaskPriModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTaskPriModify &rArr; LOS_PriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[117]"></a>osTaskScan</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, los_task.o(i.osTaskScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osTaskScan &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[114]"></a>osTaskSelfDelete</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, los_task.o(i.osTaskSelfDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = osTaskSelfDelete &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
</UL>

<P><STRONG><a name="[eb]"></a>osTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_tick.o(i.osTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
</UL>

<P><STRONG><a name="[a8]"></a>osTickStart</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, los_bsp_adapter.o(i.osTickStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTickStart
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SetTickSycle
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EnableTick
</UL>

<P><STRONG><a name="[b8]"></a>osTimerListDelete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_task.o(i.osTimerListDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[118]"></a>osTimesliceCheck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, los_timeslice.o(i.osTimesliceCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osTimesliceCheck &rArr; LOS_TaskYield &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[107]"></a>osTimesliceInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_timeslice.o(i.osTimesliceInit))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[e7]"></a>osTskStackInit</STRONG> (Thumb, 306 bytes, Stack size 12 bytes, los_hw.o(i.osTskStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osTskStackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[52]"></a>recv_Entry</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, los_api_msgqueue.o(i.recv_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = recv_Entry &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_InspectStatusSetByID
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_msgqueue.o(i.Example_MsgQueue)
</UL>
<P><STRONG><a name="[51]"></a>send_Entry</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, los_api_msgqueue.o(i.send_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = send_Entry &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_api_msgqueue.o(i.Example_MsgQueue)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[112]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTimeoutHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[e0]"></a>osSwtmrDelete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwtmrDelete))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[c0]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[e5]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[e6]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[116]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[bf]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_task.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[c2]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[cd]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[cc]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[ce]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[c1]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_mux.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[110]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
</UL>

<P><STRONG><a name="[d3]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>

<P><STRONG><a name="[d1]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>

<P><STRONG><a name="[d5]"></a>osQueuePend</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, los_queue.o(i.osQueuePend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>

<P><STRONG><a name="[d6]"></a>osQueueWakeUp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, los_queue.o(i.osQueueWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osQueueWakeUp &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>

<P><STRONG><a name="[c4]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[db]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[da]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[dc]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[c3]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_sem.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[ca]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_memory.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
</UL>

<P><STRONG><a name="[10a]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_memory.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[c5]"></a>osMemAllocWithCheck</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, los_memory.o(i.osMemAllocWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMemUsedInc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSetMagicNumAndTaskid
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFindSuitableFreeBlock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[c7]"></a>osMemCheckUsedNode</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, los_memory.o(i.osMemCheckUsedNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemIsNodeValid
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[108]"></a>osMemFindSuitableFreeBlock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, los_memory.o(i.osMemFindSuitableFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMemFindSuitableFreeBlock &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[c8]"></a>osMemFreeNode</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, los_memory.o(i.osMemFreeNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osMemFreeNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMemUsedDec
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemMergeNode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[10c]"></a>osMemIsNodeValid</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, los_memory.o(i.osMemIsNodeValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osMemIsNodeValid
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemCheckUsedNode
</UL>

<P><STRONG><a name="[10e]"></a>osMemMergeNode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_memory.o(i.osMemMergeNode))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
</UL>

<P><STRONG><a name="[cb]"></a>osMemSetMagicNumAndTaskid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_memory.o(i.osMemSetMagicNumAndTaskid))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[109]"></a>osMemSpitNode</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, los_memory.o(i.osMemSpitNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemMergeNode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[a5]"></a>LOS_Log2</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, los_multipledlinkhead.o(i.LOS_Log2))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
</UL>

<P><STRONG><a name="[f0]"></a>PIO_SetInput</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pio.o(i.PIO_SetInput))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[f1]"></a>PIO_SetOutput</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pio.o(i.PIO_SetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIO_SetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[ec]"></a>PIO_SetPeripheralA</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralA
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[ed]"></a>PIO_SetPeripheralB</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralB
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[ee]"></a>PIO_SetPeripheralC</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralC
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[ef]"></a>PIO_SetPeripheralD</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralD
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[9a]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_api_list.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Example_list
</UL>

<P><STRONG><a name="[bc]"></a>LOS_Inspect_KeyAndLed</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, los_inspect_entry.o(i.LOS_Inspect_KeyAndLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LOS_Inspect_KeyAndLed &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbLedControl
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EvbGetKeyVal
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Inspect_TskDeal
</UL>

<P><STRONG><a name="[fa]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f3]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[f7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
